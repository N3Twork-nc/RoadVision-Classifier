pipeline {
    agent { label 'server' }
    parameters {
        choice(
        name: 'RUN_STAGE',
        choices: ['','Authen', 'Data','Frontend'], // Thay các giá trị tùy chọn bằng các giá trị bạn muốn
        description: 'Chọn một giai đoạn để chạy'
    )
    }
    environment {
        REPO_GIT="https://github.com/N3Twork-nc/RoadVision-Classifier.git"
        POSTGRESQL_DB='roadvision_classifier'
    }
    triggers {
        pollSCM('* * * * *')  // Kiểm tra thay đổi mỗi phút (thay đổi tần suất nếu cần)
    }
    stages {
        stage('Clone Git Repository') {
            steps {
                // Clone the Git repository with authentication
                git url: "${REPO_GIT}", 
                    branch: 'deployment', 
                    credentialsId: 'github'
                script {
                    echo "checkout directory changed"
                    // Lấy danh sách các thư mục đã thay đổi
                    def changedDirs = sh(script: 'git diff --name-only HEAD~1 HEAD', returnStdout: true).trim().split('\n')

                    // Gán giá trị biến môi trường cho các thư mục thay đổi
                    env.FRONTEND_CHANGED = changedDirs.any { it.startsWith('Frontend/RoadVision-Classifier') } ? 'true' : 'false'
                    env.AUTHEN_SERVICE_CHANGED = changedDirs.any { it.startsWith('Backend/auth_service') } ? 'true' : 'false'
                    env.DATA_SERVICE_CHANGED = changedDirs.any { it.startsWith('Backend/data_service') } ? 'true' : 'false'
                    env.POSTGRES_CHANGED = changedDirs.any { it.startsWith('Database/PostgreSQL') } ? 'true' : 'false'
                    
                    withCredentials([usernamePassword(credentialsId: 'POSTGRES_USER_DEV', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                        script {
                            env.POSTGRESQL_USER=USERNAME
                            env.POSTGRESQL_PASSWORD=PASSWORD
                            env.POSTGRESQL_HOST="192.168.1.14"
                            env.POSTGRESQL_PORT="5432"
                        }
                    }
                }
            }
        }
        stage('Login to Docker Hub') {
            steps {
                script {
                    // Xác thực Docker với Docker Hub sử dụng credentials
                    withCredentials([usernamePassword(credentialsId: 'docker', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                        sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'
                    }
                }
            }
        }
        stage('Deploy authentication service') {
            when {
                expression { return  env.AUTHEN_SERVICE_CHANGED == 'true' || params.RUN_STAGE == 'Authen'}
            }
            steps {
                withCredentials([string(credentialsId: 'secretjwt', variable: 'SECRET_TOKEN')]) {
                    script {
                        env.SECRET_KEY = SECRET_TOKEN
                        env.SECURITY_ALGORITHM='HS256'
                    }
                }
                // Build and push the Docker image
                dir('Backend/auth_service') {
                    sh 'docker build -t caothi/auth_service:latest .'
                    sh 'docker push caothi/auth_service:latest'
                }
                // Deploy the Docker compose
                dir('Deployment/auth_service') {
                    sh 'docker compose  down'
                    sh 'docker compose up -d'
                }
            }
        }
        stage('Deploy data service') {
            when {
                expression { return  env.DATA_SERVICE_CHANGED == 'true' || params.RUN_STAGE == 'Data'}
            }
            steps {                
                // Build and push the Docker image
                dir('Backend/data_service') {
                    sh 'docker build -t caothi/data_service:latest .'
                    sh 'docker push caothi/data_service:latest'
                }
                // Deploy the Docker compose
                dir('Deployment/data_service') {
                    sh 'docker compose  down'
                    sh 'docker compose up -d'
                }
            }
        }
        stage('Deploy Database') {
            when {
                expression { return  env.POSTGRES_CHANGED == 'true' }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'POSTGRES_USER', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                   script {
                        env.POSTGRES_USER = USERNAME
                        env.POSTGRES_PASSWORD = PASSWORD
                    }
                }
                withCredentials([usernamePassword(credentialsId: 'POSTGRES_USER_DEV', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    script {
                       env.POSTGRES_USER_DEV=USERNAME
                       env.POSTGRES_PASSWORD_DEV=PASSWORD
                    }
                }
                dir('Database/PostgreSQL') {
                    sh 'docker compose down'
                    sh 'docker compose up -d'
                }
            }
        }
        stage('Deploy frontend') {
            when {
                expression { return  env.FRONTEND_CHANGED  == 'true' || params.RUN_STAGE == 'Frontend'}
            }
            steps {
                // Build and push the Docker image
                dir('Frontend/RoadVision-Classifier') {
                    sh 'docker build -t caothi/frontend_roadvision_classifier:latest .'
                    sh 'docker push caothi/frontend_roadvision_classifier:latest'
                }
                // Deploy the Docker compose
                dir('Deployment/frontend') {
                    sh 'docker compose  down'
                    sh 'docker compose up -d'
                }
            }
        }
    }
}
