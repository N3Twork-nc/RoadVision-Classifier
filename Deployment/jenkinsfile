pipeline {
    agent { label 'server' }
    environment {
        REPO_GIT="https://github.com/N3Twork-nc/RoadVision-Classifier.git"
    }
    triggers {
        pollSCM('* * * * *')  // Kiểm tra thay đổi mỗi phút (thay đổi tần suất nếu cần)
    }
    stages {
        stage('Clone Git Repository') {
            steps {
                // Clone the Git repository with authentication
                git url: "${REPO_GIT}", 
                    branch: 'deployment', 
                    credentialsId: 'github'
                script {
                    echo "checkout directory changed"
                    // Lấy danh sách các thư mục đã thay đổi
                    // Lấy danh sách các thư mục đã thay đổi (tính cả các thư mục con)
                    def changedDirs = sh(script: 'git diff --name-only HEAD~1 HEAD', returnStdout: true).trim().split('\n')

                    // Lọc ra các thư mục thay đổi (bao gồm cả thư mục con)
                    def changedDirsOnly = changedDirs.findAll { it.contains('/') } // Chỉ lấy các file có thư mục

                    // Tạo một danh sách chứa tất cả các thư mục gốc có sự thay đổi
                    def changedDirsSet = changedDirsOnly.collect { 
                        // Lấy tất cả các thư mục từ đường dẫn (có thể có nhiều cấp con)
                        def parts = it.split('/')
                        return parts.take(parts.size() - 1).join('/') // Lấy tất cả các thư mục con, bỏ qua tên file
                    }.unique()

                    echo "changedDirsSet: ${changedDirsSet}"

                    // Gán giá trị biến môi trường cho các thư mục thay đổi (bao gồm thư mục con)
                    env.FRONTEND_CHANGED = changedDirsSet.any { it.startsWith('Frontend') } ? 'true' : 'false'
                    env.AUTHEN_SERVICE_CHANGED = changedDirsSet.any { it.startsWith('Backend/auth_service') } ? 'true' : 'false'
                    env.POSTGRES_CHANGED = changedDirsSet.any { it.startsWith('Database/PostgreSQL') } ? 'true' : 'false'

                }
            }
        }
        stage('Login to Docker Hub') {
            steps {
                script {
                    // Xác thực Docker với Docker Hub sử dụng credentials
                    withCredentials([usernamePassword(credentialsId: 'docker', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                        sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'
                    }
                }
            }
        }
        stage('Deploy authentication service') {
            when {
                expression { return  env.AUTHEN_SERVICE_CHANGED == 'true' }
            }
            steps {
                // set variable
                withCredentials([usernamePassword(credentialsId: 'POSTGRES_USER_DEV', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    script {
                       env.POSTGRES_USER=USERNAME
                       env.POSTGRES_PASSWORD=PASSWORD
                    }
                }
                withCredentials([string(credentialsId: 'my-secret-token', variable: 'SECRET_TOKEN')]) {
                    script {
                        env.SECRET_KEY = SECRET_TOKEN
                    }
                }
                // Build and push the Docker image
                dir('Backend/auth_service') {
                    sh 'docker build -t caothi/auth_service:latest .'
                    sh 'docker compose push caothi/auth_service:latest'
                }
                // Deploy the Docker compose
                dir('Deployment/auth_service') {
                    sh 'docker-compose down'
                    sh 'docker compose up -d'
                }
            }
        }
        stage('Deploy Database') {
            when {
                expression { return  env.POSTGRES_CHANGED == 'true' }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'POSTGRES_USER', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                   script {
                        env.POSTGRES_USER = USERNAME
                        env.POSTGRES_PASSWORD = PASSWORD
                    }
                }
                withCredentials([usernamePassword(credentialsId: 'POSTGRES_USER_DEV', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    script {
                       env.POSTGRES_USER_DEV=USERNAME
                       env.POSTGRES_PASSWORD_DEV=PASSWORD
                    }
                }
                dir('Database/PostgreSQL') {
                    sh 'docker-compose down'
                    sh 'docker compose up -d'
                }
            }
        }
    }
}